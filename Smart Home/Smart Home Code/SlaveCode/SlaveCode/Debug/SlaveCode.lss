
SlaveCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000966  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000966  000009fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800062  00800062  000009fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001238  00000000  00000000  00000bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000844  00000000  00000000  00001df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bb6  00000000  00000000  00002634  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000240  00000000  00000000  000031ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058b  00000000  00000000  0000342c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008c9  00000000  00000000  000039b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00004280  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <__vector_10>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	a5 00       	.word	0x00a5	; ????
  56:	b9 00       	.word	0x00b9	; ????
  58:	cd 00       	.word	0x00cd	; ????
  5a:	e1 00       	.word	0x00e1	; ????
  5c:	09 01       	movw	r0, r18
  5e:	f5 00       	.word	0x00f5	; ????
  60:	98 00       	.word	0x0098	; ????
  62:	98 00       	.word	0x0098	; ????
  64:	98 00       	.word	0x0098	; ????
  66:	98 00       	.word	0x0098	; ????
  68:	98 00       	.word	0x0098	; ????
  6a:	98 00       	.word	0x0098	; ????
  6c:	98 00       	.word	0x0098	; ????
  6e:	98 00       	.word	0x0098	; ????
  70:	98 00       	.word	0x0098	; ????
  72:	98 00       	.word	0x0098	; ????
  74:	1d 01       	movw	r2, r26
  76:	22 01       	movw	r4, r4
  78:	27 01       	movw	r4, r14
  7a:	2c 01       	movw	r4, r24
  7c:	38 01       	movw	r6, r16
  7e:	31 01       	movw	r6, r2
  80:	98 00       	.word	0x0098	; ????
  82:	98 00       	.word	0x0098	; ????
  84:	98 00       	.word	0x0098	; ????
  86:	98 00       	.word	0x0098	; ????
  88:	98 00       	.word	0x0098	; ????
  8a:	98 00       	.word	0x0098	; ????
  8c:	98 00       	.word	0x0098	; ????
  8e:	98 00       	.word	0x0098	; ????
  90:	98 00       	.word	0x0098	; ????
  92:	98 00       	.word	0x0098	; ????
  94:	3d 01       	movw	r6, r26
  96:	42 01       	movw	r8, r4
  98:	47 01       	movw	r8, r14
  9a:	4c 01       	movw	r8, r24
  9c:	58 01       	movw	r10, r16
  9e:	51 01       	movw	r10, r2
  a0:	98 00       	.word	0x0098	; ????
  a2:	98 00       	.word	0x0098	; ????
  a4:	98 00       	.word	0x0098	; ????
  a6:	98 00       	.word	0x0098	; ????
  a8:	98 00       	.word	0x0098	; ????
  aa:	98 00       	.word	0x0098	; ????
  ac:	98 00       	.word	0x0098	; ????
  ae:	98 00       	.word	0x0098	; ????
  b0:	98 00       	.word	0x0098	; ????
  b2:	5d 01       	movw	r10, r26

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf e5       	ldi	r28, 0x5F	; 95
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	10 e0       	ldi	r17, 0x00	; 0
  c2:	a0 e6       	ldi	r26, 0x60	; 96
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	e6 e6       	ldi	r30, 0x66	; 102
  c8:	f9 e0       	ldi	r31, 0x09	; 9
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a2 36       	cpi	r26, 0x62	; 98
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	20 e0       	ldi	r18, 0x00	; 0
  d8:	a2 e6       	ldi	r26, 0x62	; 98
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a6 36       	cpi	r26, 0x66	; 102
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  ea:	0c 94 b1 04 	jmp	0x962	; 0x962 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <main>:
volatile uint8 counter=0; // the counter which determine the periodic time of implementing ISR
volatile uint8 last_air_conditioning_value=AIR_CONDTIONING_OFF; // last air conditioning value which will help in hysteresis

int main(void)
{
	ADC_vinit();//initialize the ADC of the micro controller
  f2:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <ADC_vinit>
	timer0_initializeCTC();//Initialize the timer zero of the micro controller
  f6:	0e 94 61 03 	call	0x6c2	; 0x6c2 <timer0_initializeCTC>
	SPI_vInitSlave();//initialize the SPI as a slave
  fa:	0e 94 55 03 	call	0x6aa	; 0x6aa <SPI_vInitSlave>
	
	/* initialization of output pins of connected leds or devices */
	LED_vInit(AIR_COND_PORT,AIR_COND_PIN);
  fe:	62 e0       	ldi	r22, 0x02	; 2
 100:	84 e4       	ldi	r24, 0x44	; 68
 102:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <LED_vInit>
	LED_vInit(TV_PORT,TV_PIN);
 106:	63 e0       	ldi	r22, 0x03	; 3
 108:	84 e4       	ldi	r24, 0x44	; 68
 10a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <LED_vInit>
	LED_vInit(ROOM1_PORT,ROOM1_PIN);
 10e:	64 e0       	ldi	r22, 0x04	; 4
 110:	84 e4       	ldi	r24, 0x44	; 68
 112:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <LED_vInit>
	LED_vInit(ROOM2_PORT,ROOM2_PIN);
 116:	65 e0       	ldi	r22, 0x05	; 5
 118:	84 e4       	ldi	r24, 0x44	; 68
 11a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <LED_vInit>
	LED_vInit(ROOM3_PORT,ROOM3_PIN);
 11e:	66 e0       	ldi	r22, 0x06	; 6
 120:	84 e4       	ldi	r24, 0x44	; 68
 122:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <LED_vInit>
	LED_vInit(ROOM4_PORT,ROOM4_PIN);
 126:	67 e0       	ldi	r22, 0x07	; 7
 128:	84 e4       	ldi	r24, 0x44	; 68
 12a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <LED_vInit>
	
	uint8 request = DEFAULT_ACK;//the value that is received from the master
	uint8 response = DEFAULT_ACK;//the values that is sent back to the master
 12e:	cf ef       	ldi	r28, 0xFF	; 255
	
	while(1)
	{
		request = SPI_ui8TransmitRecive(DEFAULT_ACK);//wait for the master to start the transmitting
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SPI_ui8TransmitRecive>
		//ALL Messages are defined in STD_messages.h
		switch (request)
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	fc 01       	movw	r30, r24
 13a:	71 97       	sbiw	r30, 0x11	; 17
 13c:	e0 33       	cpi	r30, 0x30	; 48
 13e:	f1 05       	cpc	r31, r1
 140:	b8 f7       	brcc	.-18     	; 0x130 <main+0x3e>
 142:	e6 5d       	subi	r30, 0xD6	; 214
 144:	ff 4f       	sbci	r31, 0xFF	; 255
 146:	0c 94 ab 04 	jmp	0x956	; 0x956 <__tablejump2__>
		{
			/*********************************   STATUS COMMANDS ********************************/
			//commands related to send the current status back to the master
			case ROOM1_STATUS:
			if (LED_u8ReadStatus(ROOM1_PORT,ROOM1_PIN)==0)//if the led is turned off
 14a:	64 e0       	ldi	r22, 0x04	; 4
 14c:	84 e4       	ldi	r24, 0x44	; 68
 14e:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_u8ReadStatus>
 152:	88 23       	and	r24, r24
 154:	39 f0       	breq	.+14     	; 0x164 <main+0x72>
			{
				response = OFF_STATUS;//set the response as off status
			}
			else if (LED_u8ReadStatus(ROOM1_PORT,ROOM1_PIN)==1)//if the led is turned on
 156:	64 e0       	ldi	r22, 0x04	; 4
 158:	84 e4       	ldi	r24, 0x44	; 68
 15a:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_u8ReadStatus>
 15e:	81 30       	cpi	r24, 0x01	; 1
 160:	21 f4       	brne	.+8      	; 0x16a <main+0x78>
 162:	02 c0       	rjmp	.+4      	; 0x168 <main+0x76>
			/*********************************   STATUS COMMANDS ********************************/
			//commands related to send the current status back to the master
			case ROOM1_STATUS:
			if (LED_u8ReadStatus(ROOM1_PORT,ROOM1_PIN)==0)//if the led is turned off
			{
				response = OFF_STATUS;//set the response as off status
 164:	c0 e0       	ldi	r28, 0x00	; 0
 166:	01 c0       	rjmp	.+2      	; 0x16a <main+0x78>
			}
			else if (LED_u8ReadStatus(ROOM1_PORT,ROOM1_PIN)==1)//if the led is turned on
			{
				response = ON_STATUS;//set the response as on status
 168:	c1 e0       	ldi	r28, 0x01	; 1
			}
			else
			{
			}
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
 16a:	8c 2f       	mov	r24, r28
 16c:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SPI_ui8TransmitRecive>
			break;//break the switch case
 170:	df cf       	rjmp	.-66     	; 0x130 <main+0x3e>
			case ROOM2_STATUS:
			if (LED_u8ReadStatus(ROOM2_PORT,ROOM2_PIN)==0)//if the led is turned off
 172:	65 e0       	ldi	r22, 0x05	; 5
 174:	84 e4       	ldi	r24, 0x44	; 68
 176:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_u8ReadStatus>
 17a:	88 23       	and	r24, r24
 17c:	39 f0       	breq	.+14     	; 0x18c <main+0x9a>
			{
				response = OFF_STATUS;//set the response as off status
			}
			else if (LED_u8ReadStatus(ROOM2_PORT,ROOM2_PIN)==1)//if the led is turned on
 17e:	65 e0       	ldi	r22, 0x05	; 5
 180:	84 e4       	ldi	r24, 0x44	; 68
 182:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_u8ReadStatus>
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	21 f4       	brne	.+8      	; 0x192 <main+0xa0>
 18a:	02 c0       	rjmp	.+4      	; 0x190 <main+0x9e>
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
			break;//break the switch case
			case ROOM2_STATUS:
			if (LED_u8ReadStatus(ROOM2_PORT,ROOM2_PIN)==0)//if the led is turned off
			{
				response = OFF_STATUS;//set the response as off status
 18c:	c0 e0       	ldi	r28, 0x00	; 0
 18e:	01 c0       	rjmp	.+2      	; 0x192 <main+0xa0>
			}
			else if (LED_u8ReadStatus(ROOM2_PORT,ROOM2_PIN)==1)//if the led is turned on
			{
				response = ON_STATUS;//set the response as on status
 190:	c1 e0       	ldi	r28, 0x01	; 1
			}
			else
			{
			}
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
 192:	8c 2f       	mov	r24, r28
 194:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SPI_ui8TransmitRecive>
			break;//break the switch case
 198:	cb cf       	rjmp	.-106    	; 0x130 <main+0x3e>
			case ROOM3_STATUS:
			if (LED_u8ReadStatus(ROOM3_PORT,ROOM3_PIN)==0)//if the led is turned off
 19a:	66 e0       	ldi	r22, 0x06	; 6
 19c:	84 e4       	ldi	r24, 0x44	; 68
 19e:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_u8ReadStatus>
 1a2:	88 23       	and	r24, r24
 1a4:	39 f0       	breq	.+14     	; 0x1b4 <main+0xc2>
			{
				response = OFF_STATUS;//set the response as off status
			}
			else if (LED_u8ReadStatus(ROOM3_PORT,ROOM3_PIN)==1)//if the led is turned on
 1a6:	66 e0       	ldi	r22, 0x06	; 6
 1a8:	84 e4       	ldi	r24, 0x44	; 68
 1aa:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_u8ReadStatus>
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	21 f4       	brne	.+8      	; 0x1ba <main+0xc8>
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <main+0xc6>
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
			break;//break the switch case
			case ROOM3_STATUS:
			if (LED_u8ReadStatus(ROOM3_PORT,ROOM3_PIN)==0)//if the led is turned off
			{
				response = OFF_STATUS;//set the response as off status
 1b4:	c0 e0       	ldi	r28, 0x00	; 0
 1b6:	01 c0       	rjmp	.+2      	; 0x1ba <main+0xc8>
			}
			else if (LED_u8ReadStatus(ROOM3_PORT,ROOM3_PIN)==1)//if the led is turned on
			{
				response = ON_STATUS;//set the response as on status
 1b8:	c1 e0       	ldi	r28, 0x01	; 1
			}
			else
			{
			}
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
 1ba:	8c 2f       	mov	r24, r28
 1bc:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SPI_ui8TransmitRecive>
			break;//break the switch case
 1c0:	b7 cf       	rjmp	.-146    	; 0x130 <main+0x3e>
			case ROOM4_STATUS:
			if (LED_u8ReadStatus(ROOM4_PORT,ROOM4_PIN)==0)//if the led is turned off
 1c2:	67 e0       	ldi	r22, 0x07	; 7
 1c4:	84 e4       	ldi	r24, 0x44	; 68
 1c6:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_u8ReadStatus>
 1ca:	88 23       	and	r24, r24
 1cc:	39 f0       	breq	.+14     	; 0x1dc <main+0xea>
			{
				response = OFF_STATUS;//set the response as off status
			}
			else if (LED_u8ReadStatus(ROOM4_PORT,ROOM4_PIN)==1)//if the led is turned on
 1ce:	67 e0       	ldi	r22, 0x07	; 7
 1d0:	84 e4       	ldi	r24, 0x44	; 68
 1d2:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_u8ReadStatus>
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	21 f4       	brne	.+8      	; 0x1e2 <main+0xf0>
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <main+0xee>
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
			break;//break the switch case
			case ROOM4_STATUS:
			if (LED_u8ReadStatus(ROOM4_PORT,ROOM4_PIN)==0)//if the led is turned off
			{
				response = OFF_STATUS;//set the response as off status
 1dc:	c0 e0       	ldi	r28, 0x00	; 0
 1de:	01 c0       	rjmp	.+2      	; 0x1e2 <main+0xf0>
			}
			else if (LED_u8ReadStatus(ROOM4_PORT,ROOM4_PIN)==1)//if the led is turned on
			{
				response = ON_STATUS;//set the response as on status
 1e0:	c1 e0       	ldi	r28, 0x01	; 1
			}
			else
			{
			}
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
 1e2:	8c 2f       	mov	r24, r28
 1e4:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SPI_ui8TransmitRecive>
			break;//break the switch case
 1e8:	a3 cf       	rjmp	.-186    	; 0x130 <main+0x3e>
			case AIR_COND_STATUS:
			if (LED_u8ReadStatus(AIR_COND_PORT,AIR_COND_PIN)==0)//if the led is turned off
 1ea:	62 e0       	ldi	r22, 0x02	; 2
 1ec:	84 e4       	ldi	r24, 0x44	; 68
 1ee:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_u8ReadStatus>
 1f2:	88 23       	and	r24, r24
 1f4:	39 f0       	breq	.+14     	; 0x204 <main+0x112>
			{
				response = OFF_STATUS;//set the response as off status
			}
			else if (LED_u8ReadStatus(AIR_COND_PORT,AIR_COND_PIN)==1)//if the led is turned on
 1f6:	62 e0       	ldi	r22, 0x02	; 2
 1f8:	84 e4       	ldi	r24, 0x44	; 68
 1fa:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_u8ReadStatus>
 1fe:	81 30       	cpi	r24, 0x01	; 1
 200:	21 f4       	brne	.+8      	; 0x20a <main+0x118>
 202:	02 c0       	rjmp	.+4      	; 0x208 <main+0x116>
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
			break;//break the switch case
			case AIR_COND_STATUS:
			if (LED_u8ReadStatus(AIR_COND_PORT,AIR_COND_PIN)==0)//if the led is turned off
			{
				response = OFF_STATUS;//set the response as off status
 204:	c0 e0       	ldi	r28, 0x00	; 0
 206:	01 c0       	rjmp	.+2      	; 0x20a <main+0x118>
			}
			else if (LED_u8ReadStatus(AIR_COND_PORT,AIR_COND_PIN)==1)//if the led is turned on
			{
				response = ON_STATUS;//set the response as on status
 208:	c1 e0       	ldi	r28, 0x01	; 1
			}
			else
			{
			}
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
 20a:	8c 2f       	mov	r24, r28
 20c:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SPI_ui8TransmitRecive>
			break;
 210:	8f cf       	rjmp	.-226    	; 0x130 <main+0x3e>
			case TV_STATUS:
			if (LED_u8ReadStatus(TV_PORT,TV_PIN)==0)//if the led is turned off
 212:	63 e0       	ldi	r22, 0x03	; 3
 214:	84 e4       	ldi	r24, 0x44	; 68
 216:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_u8ReadStatus>
 21a:	88 23       	and	r24, r24
 21c:	39 f0       	breq	.+14     	; 0x22c <main+0x13a>
			{
				response = OFF_STATUS;//set the response as off status
			}
			else if (LED_u8ReadStatus(TV_PORT,TV_PIN)==1)//if the led is turned on
 21e:	63 e0       	ldi	r22, 0x03	; 3
 220:	84 e4       	ldi	r24, 0x44	; 68
 222:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_u8ReadStatus>
 226:	81 30       	cpi	r24, 0x01	; 1
 228:	21 f4       	brne	.+8      	; 0x232 <main+0x140>
 22a:	02 c0       	rjmp	.+4      	; 0x230 <main+0x13e>
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
			break;
			case TV_STATUS:
			if (LED_u8ReadStatus(TV_PORT,TV_PIN)==0)//if the led is turned off
			{
				response = OFF_STATUS;//set the response as off status
 22c:	c0 e0       	ldi	r28, 0x00	; 0
 22e:	01 c0       	rjmp	.+2      	; 0x232 <main+0x140>
			}
			else if (LED_u8ReadStatus(TV_PORT,TV_PIN)==1)//if the led is turned on
			{
				response = ON_STATUS;//set the response as on status
 230:	c1 e0       	ldi	r28, 0x01	; 1
			}
			else
			{
			}
			SPI_ui8TransmitRecive(response);//response to the transmitter with the status
 232:	8c 2f       	mov	r24, r28
 234:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SPI_ui8TransmitRecive>
			break;//break the switch case
 238:	7b cf       	rjmp	.-266    	; 0x130 <main+0x3e>
			
			/*********************************   TURN ON COMMANDS ********************************/
			case ROOM1_TURN_ON:
			LED_vTurnOn(ROOM1_PORT,ROOM1_PIN);//turn on the led of room 1
 23a:	64 e0       	ldi	r22, 0x04	; 4
 23c:	84 e4       	ldi	r24, 0x44	; 68
 23e:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LED_vTurnOn>
			break;//break the switch case
 242:	76 cf       	rjmp	.-276    	; 0x130 <main+0x3e>
			case ROOM2_TURN_ON:
			LED_vTurnOn(ROOM1_PORT,ROOM2_PIN);//turn on the led of room 2
 244:	65 e0       	ldi	r22, 0x05	; 5
 246:	84 e4       	ldi	r24, 0x44	; 68
 248:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LED_vTurnOn>
			break;//break the switch case
 24c:	71 cf       	rjmp	.-286    	; 0x130 <main+0x3e>
			case ROOM3_TURN_ON:
			LED_vTurnOn(ROOM3_PORT,ROOM3_PIN);//turn on the led of room 3
 24e:	66 e0       	ldi	r22, 0x06	; 6
 250:	84 e4       	ldi	r24, 0x44	; 68
 252:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LED_vTurnOn>
			break;//break the switch case
 256:	6c cf       	rjmp	.-296    	; 0x130 <main+0x3e>
			case ROOM4_TURN_ON:
			LED_vTurnOn(ROOM4_PORT,ROOM4_PIN);//turn on the led of room 4
 258:	67 e0       	ldi	r22, 0x07	; 7
 25a:	84 e4       	ldi	r24, 0x44	; 68
 25c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LED_vTurnOn>
			break;//break the switch case
 260:	67 cf       	rjmp	.-306    	; 0x130 <main+0x3e>
			case AIR_COND_TURN_ON:
			timer0_initializeCTC();
 262:	0e 94 61 03 	call	0x6c2	; 0x6c2 <timer0_initializeCTC>
			LED_vTurnOn(AIR_COND_PORT,AIR_COND_PIN);//turn on the led of air conditioning
 266:	62 e0       	ldi	r22, 0x02	; 2
 268:	84 e4       	ldi	r24, 0x44	; 68
 26a:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LED_vTurnOn>
			break;//break the switch case
 26e:	60 cf       	rjmp	.-320    	; 0x130 <main+0x3e>
			case TV_TURN_ON:
			LED_vTurnOn(TV_PORT,TV_PIN);//turn on the led of the TV
 270:	63 e0       	ldi	r22, 0x03	; 3
 272:	84 e4       	ldi	r24, 0x44	; 68
 274:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LED_vTurnOn>
			break;//break the switch case
 278:	5b cf       	rjmp	.-330    	; 0x130 <main+0x3e>
			
			/*********************************   TURN OFF COMMANDS ********************************/
			case ROOM1_TURN_OFF:
			LED_vTurnOff(ROOM1_PORT,ROOM1_PIN);//turn off the led of room 1
 27a:	64 e0       	ldi	r22, 0x04	; 4
 27c:	84 e4       	ldi	r24, 0x44	; 68
 27e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LED_vTurnOff>
			break;//break the switch case
 282:	56 cf       	rjmp	.-340    	; 0x130 <main+0x3e>
			case ROOM2_TURN_OFF:
			LED_vTurnOff(ROOM2_PORT,ROOM2_PIN);//turn off the led of room 2
 284:	65 e0       	ldi	r22, 0x05	; 5
 286:	84 e4       	ldi	r24, 0x44	; 68
 288:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LED_vTurnOff>
			break;//break the switch case
 28c:	51 cf       	rjmp	.-350    	; 0x130 <main+0x3e>
			case ROOM3_TURN_OFF:
			LED_vTurnOff(ROOM3_PORT,ROOM3_PIN);//turn off the led of room 3
 28e:	66 e0       	ldi	r22, 0x06	; 6
 290:	84 e4       	ldi	r24, 0x44	; 68
 292:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LED_vTurnOff>
			break;//break the switch case
 296:	4c cf       	rjmp	.-360    	; 0x130 <main+0x3e>
			case ROOM4_TURN_OFF:
			LED_vTurnOff(ROOM4_PORT,ROOM4_PIN);//turn off the led of room 4
 298:	67 e0       	ldi	r22, 0x07	; 7
 29a:	84 e4       	ldi	r24, 0x44	; 68
 29c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LED_vTurnOff>
			break;//break the switch case
 2a0:	47 cf       	rjmp	.-370    	; 0x130 <main+0x3e>
			case AIR_COND_TURN_OFF:
			timer0_stop();
 2a2:	0e 94 77 03 	call	0x6ee	; 0x6ee <timer0_stop>
			LED_vTurnOff(AIR_COND_PORT,AIR_COND_PIN);//turn off the led of air conditioning
 2a6:	62 e0       	ldi	r22, 0x02	; 2
 2a8:	84 e4       	ldi	r24, 0x44	; 68
 2aa:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LED_vTurnOff>
			break;//break the switch case
 2ae:	40 cf       	rjmp	.-384    	; 0x130 <main+0x3e>
			case TV_TURN_OFF:
			LED_vTurnOff(TV_PORT,TV_PIN);//turn off the led of the TV
 2b0:	63 e0       	ldi	r22, 0x03	; 3
 2b2:	84 e4       	ldi	r24, 0x44	; 68
 2b4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LED_vTurnOff>
			break;//break the switch case
 2b8:	3b cf       	rjmp	.-394    	; 0x130 <main+0x3e>
			
			/*********************************   Set temperature   ********************************/
			case SET_TEMPERATURE:
			required_temperature = SPI_ui8TransmitRecive(DEFAULT_ACK);//get the temperature from the master and store the temperature in required temperature 
 2ba:	8f ef       	ldi	r24, 0xFF	; 255
 2bc:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SPI_ui8TransmitRecive>
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
 2c6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			break;//break the switch case
 2ca:	32 cf       	rjmp	.-412    	; 0x130 <main+0x3e>

000002cc <__vector_10>:
		}
	}
}

ISR(TIMER0_COMP_vect)
{
 2cc:	1f 92       	push	r1
 2ce:	0f 92       	push	r0
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	0f 92       	push	r0
 2d4:	11 24       	eor	r1, r1
 2d6:	2f 93       	push	r18
 2d8:	3f 93       	push	r19
 2da:	4f 93       	push	r20
 2dc:	5f 93       	push	r21
 2de:	6f 93       	push	r22
 2e0:	7f 93       	push	r23
 2e2:	8f 93       	push	r24
 2e4:	9f 93       	push	r25
 2e6:	af 93       	push	r26
 2e8:	bf 93       	push	r27
 2ea:	ef 93       	push	r30
 2ec:	ff 93       	push	r31
	counter++;//count the ticks of the timer zero
 2ee:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <counter>
 2f2:	8f 5f       	subi	r24, 0xFF	; 255
 2f4:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <counter>
	if(counter>=10)//do that code every 10 ticks 
 2f8:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <counter>
 2fc:	8a 30       	cpi	r24, 0x0A	; 10
 2fe:	08 f4       	brcc	.+2      	; 0x302 <__vector_10+0x36>
 300:	58 c0       	rjmp	.+176    	; 0x3b2 <__vector_10+0xe6>
	{
		counter=0;//clear the counter of ticks
 302:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <counter>
		temp_sensor_reading=(0.25*ADC_u16Read());//read the temperature from the temperature sensor connected to the ADC of the micro controller
 306:	0e 94 09 02 	call	0x412	; 0x412 <ADC_u16Read>
 30a:	bc 01       	movw	r22, r24
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 b0 03 	call	0x760	; 0x760 <__floatunsisf>
 314:	20 e0       	ldi	r18, 0x00	; 0
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	40 e8       	ldi	r20, 0x80	; 128
 31a:	5e e3       	ldi	r21, 0x3E	; 62
 31c:	0e 94 3e 04 	call	0x87c	; 0x87c <__mulsf3>
 320:	0e 94 81 03 	call	0x702	; 0x702 <__fixunssfsi>
 324:	70 93 65 00 	sts	0x0065, r23	; 0x800065 <temp_sensor_reading+0x1>
 328:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <temp_sensor_reading>
		if (temp_sensor_reading>=(required_temperature+1))//do that code if the read temperature if greater than required temperature by one or more
 32c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 330:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 334:	01 96       	adiw	r24, 0x01	; 1
 336:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <temp_sensor_reading>
 33a:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <temp_sensor_reading+0x1>
 33e:	28 17       	cp	r18, r24
 340:	39 07       	cpc	r19, r25
 342:	40 f0       	brcs	.+16     	; 0x354 <__vector_10+0x88>
		{
			LED_vTurnOn(AIR_COND_PORT,AIR_COND_PIN);//turn on the led of the air conditioning
 344:	62 e0       	ldi	r22, 0x02	; 2
 346:	84 e4       	ldi	r24, 0x44	; 68
 348:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LED_vTurnOn>
			last_air_conditioning_value=AIR_CONDTIONING_ON;//save the value of the state of the air conditioning
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 352:	2f c0       	rjmp	.+94     	; 0x3b2 <__vector_10+0xe6>
		}
		else if (temp_sensor_reading<=(required_temperature-1))//do that code if the read temperature if lesser than required temperature by one or more
 354:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 358:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <temp_sensor_reading>
 362:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <temp_sensor_reading+0x1>
 366:	82 17       	cp	r24, r18
 368:	93 07       	cpc	r25, r19
 36a:	38 f0       	brcs	.+14     	; 0x37a <__vector_10+0xae>
		{
			LED_vTurnOff(AIR_COND_PORT,AIR_COND_PIN);//turn off the led of the air conditioning
 36c:	62 e0       	ldi	r22, 0x02	; 2
 36e:	84 e4       	ldi	r24, 0x44	; 68
 370:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LED_vTurnOff>
			last_air_conditioning_value=AIR_CONDTIONING_OFF;//save the value of the state of the air conditioning
 374:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
 378:	1c c0       	rjmp	.+56     	; 0x3b2 <__vector_10+0xe6>
		}
		else if (required_temperature==temp_sensor_reading)//do that code if the read temperature is equal to the required temperature
 37a:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
 37e:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
 382:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <temp_sensor_reading>
 386:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <temp_sensor_reading+0x1>
 38a:	28 17       	cp	r18, r24
 38c:	39 07       	cpc	r19, r25
 38e:	89 f4       	brne	.+34     	; 0x3b2 <__vector_10+0xe6>
		{
			if (last_air_conditioning_value==AIR_CONDTIONING_ON)//in the case of the last saved status of the air conditioning was on 
 390:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 394:	81 30       	cpi	r24, 0x01	; 1
 396:	29 f4       	brne	.+10     	; 0x3a2 <__vector_10+0xd6>
			{
				LED_vTurnOn(AIR_COND_PORT,AIR_COND_PIN);//turn on the led of the air conditioning
 398:	62 e0       	ldi	r22, 0x02	; 2
 39a:	84 e4       	ldi	r24, 0x44	; 68
 39c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LED_vTurnOn>
 3a0:	08 c0       	rjmp	.+16     	; 0x3b2 <__vector_10+0xe6>
			}
			else if (last_air_conditioning_value==AIR_CONDTIONING_OFF)//in the case of the last saved status of the air conditioning was off 
 3a2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 3a6:	81 11       	cpse	r24, r1
 3a8:	04 c0       	rjmp	.+8      	; 0x3b2 <__vector_10+0xe6>
			{
				LED_vTurnOff(AIR_COND_PORT,AIR_COND_PIN);//turn off the led of the air conditioning
 3aa:	62 e0       	ldi	r22, 0x02	; 2
 3ac:	84 e4       	ldi	r24, 0x44	; 68
 3ae:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LED_vTurnOff>
			}
		}
	}
}
 3b2:	ff 91       	pop	r31
 3b4:	ef 91       	pop	r30
 3b6:	bf 91       	pop	r27
 3b8:	af 91       	pop	r26
 3ba:	9f 91       	pop	r25
 3bc:	8f 91       	pop	r24
 3be:	7f 91       	pop	r23
 3c0:	6f 91       	pop	r22
 3c2:	5f 91       	pop	r21
 3c4:	4f 91       	pop	r20
 3c6:	3f 91       	pop	r19
 3c8:	2f 91       	pop	r18
 3ca:	0f 90       	pop	r0
 3cc:	0f be       	out	0x3f, r0	; 63
 3ce:	0f 90       	pop	r0
 3d0:	1f 90       	pop	r1
 3d2:	18 95       	reti

000003d4 <LED_vInit>:
{
	DIO_write(portname,pinnumber,0);//Set the given pin in the given port to zero(off)
}
void LED_vToggle(uint8 portname,uint8 pinnumber)
{
	DIO_toggle(portname,pinnumber);//Set the given pin in the given port to zero if it is one or set it to one if it is zero
 3d4:	41 e0       	ldi	r20, 0x01	; 1
 3d6:	0e 94 18 02 	call	0x430	; 0x430 <DIO_vsetPINDir>
 3da:	08 95       	ret

000003dc <LED_vTurnOn>:
 3dc:	41 e0       	ldi	r20, 0x01	; 1
 3de:	0e 94 88 02 	call	0x510	; 0x510 <DIO_write>
 3e2:	08 95       	ret

000003e4 <LED_vTurnOff>:
 3e4:	40 e0       	ldi	r20, 0x00	; 0
 3e6:	0e 94 88 02 	call	0x510	; 0x510 <DIO_write>
 3ea:	08 95       	ret

000003ec <LED_u8ReadStatus>:
}
uint8 LED_u8ReadStatus(uint8 portname,uint8 pinnumber)
{
	return DIO_u8read(portname,pinnumber);//return the current status of the given pin
 3ec:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <DIO_u8read>
}
 3f0:	08 95       	ret

000003f2 <ADC_vinit>:
#include "std_macros.h"
#include "STD_Types.h"
void ADC_vinit(void)
{
	/*configure VREF to the internal voltage(2.56 V)*/
	SET_BIT(ADMUX,REFS0);
 3f2:	87 b1       	in	r24, 0x07	; 7
 3f4:	80 64       	ori	r24, 0x40	; 64
 3f6:	87 b9       	out	0x07, r24	; 7
	SET_BIT(ADMUX,REFS1);
 3f8:	87 b1       	in	r24, 0x07	; 7
 3fa:	80 68       	ori	r24, 0x80	; 128
 3fc:	87 b9       	out	0x07, r24	; 7
	/*************************************/
	SET_BIT(ADCSRA,ADEN); // ENable ADC
 3fe:	86 b1       	in	r24, 0x06	; 6
 400:	80 68       	ori	r24, 0x80	; 128
 402:	86 b9       	out	0x06, r24	; 6
	
	/* adjust ADC clock by select the division factor----->64*/
	SET_BIT(ADCSRA,ADPS2);
 404:	86 b1       	in	r24, 0x06	; 6
 406:	84 60       	ori	r24, 0x04	; 4
 408:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,ADPS1);
 40a:	86 b1       	in	r24, 0x06	; 6
 40c:	82 60       	ori	r24, 0x02	; 2
 40e:	86 b9       	out	0x06, r24	; 6
 410:	08 95       	ret

00000412 <ADC_u16Read>:
	/***********************************/
}
uint16 ADC_u16Read(void)
{
	uint16 read_val; // which contain the converted value which will be returned
	SET_BIT(ADCSRA,ADSC); // start the ADC conversion
 412:	86 b1       	in	r24, 0x06	; 6
 414:	80 64       	ori	r24, 0x40	; 64
 416:	86 b9       	out	0x06, r24	; 6
	while(IS_BIT_CLR(ADCSRA,ADIF));//stay in your position till ADIF become 1 when conversion complete
 418:	34 9b       	sbis	0x06, 4	; 6
 41a:	fe cf       	rjmp	.-4      	; 0x418 <ADC_u16Read+0x6>
	SET_BIT(ADCSRA,ADIF); // clear ADIF
 41c:	86 b1       	in	r24, 0x06	; 6
 41e:	80 61       	ori	r24, 0x10	; 16
 420:	86 b9       	out	0x06, r24	; 6
	read_val=(ADCL); //reas the ADCL register
 422:	24 b1       	in	r18, 0x04	; 4
	read_val|=(ADCH<<8);//read the whole register
 424:	85 b1       	in	r24, 0x05	; 5
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	98 2f       	mov	r25, r24
 42a:	88 27       	eor	r24, r24
	return read_val ; // return the converted value
 42c:	82 2b       	or	r24, r18
 42e:	08 95       	ret

00000430 <DIO_vsetPINDir>:
#include <avr/io.h>
#include "std_macros.h"
#include "DIO.h"
void DIO_vsetPINDir(uint8 portname,uint8 pinnumber,uint8 direction)
{
	switch(portname)
 430:	82 34       	cpi	r24, 0x42	; 66
 432:	19 f1       	breq	.+70     	; 0x47a <DIO_vsetPINDir+0x4a>
 434:	18 f4       	brcc	.+6      	; 0x43c <DIO_vsetPINDir+0xc>
 436:	81 34       	cpi	r24, 0x41	; 65
 438:	39 f0       	breq	.+14     	; 0x448 <DIO_vsetPINDir+0x18>
 43a:	08 95       	ret
 43c:	83 34       	cpi	r24, 0x43	; 67
 43e:	b1 f1       	breq	.+108    	; 0x4ac <DIO_vsetPINDir+0x7c>
 440:	84 34       	cpi	r24, 0x44	; 68
 442:	09 f4       	brne	.+2      	; 0x446 <DIO_vsetPINDir+0x16>
 444:	4c c0       	rjmp	.+152    	; 0x4de <DIO_vsetPINDir+0xae>
 446:	08 95       	ret
	{
		
		
		case 'A':
		if(direction==1)
 448:	41 30       	cpi	r20, 0x01	; 1
 44a:	59 f4       	brne	.+22     	; 0x462 <DIO_vsetPINDir+0x32>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
 44c:	2a b3       	in	r18, 0x1a	; 26
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	02 c0       	rjmp	.+4      	; 0x458 <DIO_vsetPINDir+0x28>
 454:	88 0f       	add	r24, r24
 456:	99 1f       	adc	r25, r25
 458:	6a 95       	dec	r22
 45a:	e2 f7       	brpl	.-8      	; 0x454 <DIO_vsetPINDir+0x24>
 45c:	82 2b       	or	r24, r18
 45e:	8a bb       	out	0x1a, r24	; 26
 460:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
 462:	2a b3       	in	r18, 0x1a	; 26
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	02 c0       	rjmp	.+4      	; 0x46e <DIO_vsetPINDir+0x3e>
 46a:	88 0f       	add	r24, r24
 46c:	99 1f       	adc	r25, r25
 46e:	6a 95       	dec	r22
 470:	e2 f7       	brpl	.-8      	; 0x46a <DIO_vsetPINDir+0x3a>
 472:	80 95       	com	r24
 474:	82 23       	and	r24, r18
 476:	8a bb       	out	0x1a, r24	; 26
 478:	08 95       	ret
		}
		break;
		case 'B':
		if(direction==1)
 47a:	41 30       	cpi	r20, 0x01	; 1
 47c:	59 f4       	brne	.+22     	; 0x494 <DIO_vsetPINDir+0x64>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
 47e:	27 b3       	in	r18, 0x17	; 23
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	02 c0       	rjmp	.+4      	; 0x48a <DIO_vsetPINDir+0x5a>
 486:	88 0f       	add	r24, r24
 488:	99 1f       	adc	r25, r25
 48a:	6a 95       	dec	r22
 48c:	e2 f7       	brpl	.-8      	; 0x486 <DIO_vsetPINDir+0x56>
 48e:	82 2b       	or	r24, r18
 490:	87 bb       	out	0x17, r24	; 23
 492:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
 494:	27 b3       	in	r18, 0x17	; 23
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <DIO_vsetPINDir+0x70>
 49c:	88 0f       	add	r24, r24
 49e:	99 1f       	adc	r25, r25
 4a0:	6a 95       	dec	r22
 4a2:	e2 f7       	brpl	.-8      	; 0x49c <DIO_vsetPINDir+0x6c>
 4a4:	80 95       	com	r24
 4a6:	82 23       	and	r24, r18
 4a8:	87 bb       	out	0x17, r24	; 23
 4aa:	08 95       	ret
		}
		break;
		case 'C':
		if(direction==1)
 4ac:	41 30       	cpi	r20, 0x01	; 1
 4ae:	59 f4       	brne	.+22     	; 0x4c6 <DIO_vsetPINDir+0x96>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
 4b0:	24 b3       	in	r18, 0x14	; 20
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	02 c0       	rjmp	.+4      	; 0x4bc <DIO_vsetPINDir+0x8c>
 4b8:	88 0f       	add	r24, r24
 4ba:	99 1f       	adc	r25, r25
 4bc:	6a 95       	dec	r22
 4be:	e2 f7       	brpl	.-8      	; 0x4b8 <DIO_vsetPINDir+0x88>
 4c0:	82 2b       	or	r24, r18
 4c2:	84 bb       	out	0x14, r24	; 20
 4c4:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
 4c6:	24 b3       	in	r18, 0x14	; 20
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <DIO_vsetPINDir+0xa2>
 4ce:	88 0f       	add	r24, r24
 4d0:	99 1f       	adc	r25, r25
 4d2:	6a 95       	dec	r22
 4d4:	e2 f7       	brpl	.-8      	; 0x4ce <DIO_vsetPINDir+0x9e>
 4d6:	80 95       	com	r24
 4d8:	82 23       	and	r24, r18
 4da:	84 bb       	out	0x14, r24	; 20
 4dc:	08 95       	ret
		}
		break;
		case 'D':
		if(direction==1)
 4de:	41 30       	cpi	r20, 0x01	; 1
 4e0:	59 f4       	brne	.+22     	; 0x4f8 <DIO_vsetPINDir+0xc8>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
 4e2:	21 b3       	in	r18, 0x11	; 17
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <DIO_vsetPINDir+0xbe>
 4ea:	88 0f       	add	r24, r24
 4ec:	99 1f       	adc	r25, r25
 4ee:	6a 95       	dec	r22
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <DIO_vsetPINDir+0xba>
 4f2:	82 2b       	or	r24, r18
 4f4:	81 bb       	out	0x11, r24	; 17
 4f6:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
 4f8:	21 b3       	in	r18, 0x11	; 17
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <DIO_vsetPINDir+0xd4>
 500:	88 0f       	add	r24, r24
 502:	99 1f       	adc	r25, r25
 504:	6a 95       	dec	r22
 506:	e2 f7       	brpl	.-8      	; 0x500 <DIO_vsetPINDir+0xd0>
 508:	80 95       	com	r24
 50a:	82 23       	and	r24, r18
 50c:	81 bb       	out	0x11, r24	; 17
 50e:	08 95       	ret

00000510 <DIO_write>:
}


void DIO_write(uint8 portname,uint8 pinnumber,uint8 outputvalue)
{
	switch(portname)
 510:	82 34       	cpi	r24, 0x42	; 66
 512:	19 f1       	breq	.+70     	; 0x55a <DIO_write+0x4a>
 514:	18 f4       	brcc	.+6      	; 0x51c <DIO_write+0xc>
 516:	81 34       	cpi	r24, 0x41	; 65
 518:	39 f0       	breq	.+14     	; 0x528 <DIO_write+0x18>
 51a:	08 95       	ret
 51c:	83 34       	cpi	r24, 0x43	; 67
 51e:	b1 f1       	breq	.+108    	; 0x58c <DIO_write+0x7c>
 520:	84 34       	cpi	r24, 0x44	; 68
 522:	09 f4       	brne	.+2      	; 0x526 <DIO_write+0x16>
 524:	4c c0       	rjmp	.+152    	; 0x5be <DIO_write+0xae>
 526:	08 95       	ret
	{
		case 'A' :
		
		if(outputvalue==1)
 528:	41 30       	cpi	r20, 0x01	; 1
 52a:	59 f4       	brne	.+22     	; 0x542 <DIO_write+0x32>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
 52c:	2b b3       	in	r18, 0x1b	; 27
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	02 c0       	rjmp	.+4      	; 0x538 <DIO_write+0x28>
 534:	88 0f       	add	r24, r24
 536:	99 1f       	adc	r25, r25
 538:	6a 95       	dec	r22
 53a:	e2 f7       	brpl	.-8      	; 0x534 <DIO_write+0x24>
 53c:	82 2b       	or	r24, r18
 53e:	8b bb       	out	0x1b, r24	; 27
 540:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
 542:	2b b3       	in	r18, 0x1b	; 27
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	02 c0       	rjmp	.+4      	; 0x54e <DIO_write+0x3e>
 54a:	88 0f       	add	r24, r24
 54c:	99 1f       	adc	r25, r25
 54e:	6a 95       	dec	r22
 550:	e2 f7       	brpl	.-8      	; 0x54a <DIO_write+0x3a>
 552:	80 95       	com	r24
 554:	82 23       	and	r24, r18
 556:	8b bb       	out	0x1b, r24	; 27
 558:	08 95       	ret
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
 55a:	41 30       	cpi	r20, 0x01	; 1
 55c:	59 f4       	brne	.+22     	; 0x574 <DIO_write+0x64>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
 55e:	28 b3       	in	r18, 0x18	; 24
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	02 c0       	rjmp	.+4      	; 0x56a <DIO_write+0x5a>
 566:	88 0f       	add	r24, r24
 568:	99 1f       	adc	r25, r25
 56a:	6a 95       	dec	r22
 56c:	e2 f7       	brpl	.-8      	; 0x566 <DIO_write+0x56>
 56e:	82 2b       	or	r24, r18
 570:	88 bb       	out	0x18, r24	; 24
 572:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
 574:	28 b3       	in	r18, 0x18	; 24
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	02 c0       	rjmp	.+4      	; 0x580 <DIO_write+0x70>
 57c:	88 0f       	add	r24, r24
 57e:	99 1f       	adc	r25, r25
 580:	6a 95       	dec	r22
 582:	e2 f7       	brpl	.-8      	; 0x57c <DIO_write+0x6c>
 584:	80 95       	com	r24
 586:	82 23       	and	r24, r18
 588:	88 bb       	out	0x18, r24	; 24
 58a:	08 95       	ret
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
 58c:	41 30       	cpi	r20, 0x01	; 1
 58e:	59 f4       	brne	.+22     	; 0x5a6 <DIO_write+0x96>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
 590:	25 b3       	in	r18, 0x15	; 21
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	02 c0       	rjmp	.+4      	; 0x59c <DIO_write+0x8c>
 598:	88 0f       	add	r24, r24
 59a:	99 1f       	adc	r25, r25
 59c:	6a 95       	dec	r22
 59e:	e2 f7       	brpl	.-8      	; 0x598 <DIO_write+0x88>
 5a0:	82 2b       	or	r24, r18
 5a2:	85 bb       	out	0x15, r24	; 21
 5a4:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
 5a6:	25 b3       	in	r18, 0x15	; 21
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <DIO_write+0xa2>
 5ae:	88 0f       	add	r24, r24
 5b0:	99 1f       	adc	r25, r25
 5b2:	6a 95       	dec	r22
 5b4:	e2 f7       	brpl	.-8      	; 0x5ae <DIO_write+0x9e>
 5b6:	80 95       	com	r24
 5b8:	82 23       	and	r24, r18
 5ba:	85 bb       	out	0x15, r24	; 21
 5bc:	08 95       	ret
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
 5be:	41 30       	cpi	r20, 0x01	; 1
 5c0:	59 f4       	brne	.+22     	; 0x5d8 <DIO_write+0xc8>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
 5c2:	22 b3       	in	r18, 0x12	; 18
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <DIO_write+0xbe>
 5ca:	88 0f       	add	r24, r24
 5cc:	99 1f       	adc	r25, r25
 5ce:	6a 95       	dec	r22
 5d0:	e2 f7       	brpl	.-8      	; 0x5ca <DIO_write+0xba>
 5d2:	82 2b       	or	r24, r18
 5d4:	82 bb       	out	0x12, r24	; 18
 5d6:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
 5d8:	22 b3       	in	r18, 0x12	; 18
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <DIO_write+0xd4>
 5e0:	88 0f       	add	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	6a 95       	dec	r22
 5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <DIO_write+0xd0>
 5e8:	80 95       	com	r24
 5ea:	82 23       	and	r24, r18
 5ec:	82 bb       	out	0x12, r24	; 18
 5ee:	08 95       	ret

000005f0 <DIO_u8read>:


uint8 DIO_u8read(uint8 portname,uint8 pinnumber)
{
	uint8 return_value=0;
	switch(portname)
 5f0:	82 34       	cpi	r24, 0x42	; 66
 5f2:	e9 f0       	breq	.+58     	; 0x62e <DIO_u8read+0x3e>
 5f4:	18 f4       	brcc	.+6      	; 0x5fc <DIO_u8read+0xc>
 5f6:	81 34       	cpi	r24, 0x41	; 65
 5f8:	31 f0       	breq	.+12     	; 0x606 <DIO_u8read+0x16>
 5fa:	55 c0       	rjmp	.+170    	; 0x6a6 <DIO_u8read+0xb6>
 5fc:	83 34       	cpi	r24, 0x43	; 67
 5fe:	59 f1       	breq	.+86     	; 0x656 <DIO_u8read+0x66>
 600:	84 34       	cpi	r24, 0x44	; 68
 602:	e9 f1       	breq	.+122    	; 0x67e <DIO_u8read+0x8e>
 604:	50 c0       	rjmp	.+160    	; 0x6a6 <DIO_u8read+0xb6>
	{
		case 'A' :
		return_value=Read_bIT(PINA,pinnumber);//Read the value from the given pin in port A
 606:	49 b3       	in	r20, 0x19	; 25
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	9c 01       	movw	r18, r24
 60e:	06 2e       	mov	r0, r22
 610:	02 c0       	rjmp	.+4      	; 0x616 <DIO_u8read+0x26>
 612:	22 0f       	add	r18, r18
 614:	33 1f       	adc	r19, r19
 616:	0a 94       	dec	r0
 618:	e2 f7       	brpl	.-8      	; 0x612 <DIO_u8read+0x22>
 61a:	84 2f       	mov	r24, r20
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	82 23       	and	r24, r18
 620:	93 23       	and	r25, r19
 622:	02 c0       	rjmp	.+4      	; 0x628 <DIO_u8read+0x38>
 624:	95 95       	asr	r25
 626:	87 95       	ror	r24
 628:	6a 95       	dec	r22
 62a:	e2 f7       	brpl	.-8      	; 0x624 <DIO_u8read+0x34>
		break;
 62c:	08 95       	ret
		
		case 'B' :
		return_value=Read_bIT(PINB,pinnumber);//Read the value from the given pin in port B
 62e:	46 b3       	in	r20, 0x16	; 22
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	9c 01       	movw	r18, r24
 636:	06 2e       	mov	r0, r22
 638:	02 c0       	rjmp	.+4      	; 0x63e <DIO_u8read+0x4e>
 63a:	22 0f       	add	r18, r18
 63c:	33 1f       	adc	r19, r19
 63e:	0a 94       	dec	r0
 640:	e2 f7       	brpl	.-8      	; 0x63a <DIO_u8read+0x4a>
 642:	84 2f       	mov	r24, r20
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	82 23       	and	r24, r18
 648:	93 23       	and	r25, r19
 64a:	02 c0       	rjmp	.+4      	; 0x650 <DIO_u8read+0x60>
 64c:	95 95       	asr	r25
 64e:	87 95       	ror	r24
 650:	6a 95       	dec	r22
 652:	e2 f7       	brpl	.-8      	; 0x64c <DIO_u8read+0x5c>
		break;
 654:	08 95       	ret
		
		case 'C' :
		return_value=Read_bIT(PINC,pinnumber);//Read the value from the given pin in port C
 656:	43 b3       	in	r20, 0x13	; 19
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	9c 01       	movw	r18, r24
 65e:	06 2e       	mov	r0, r22
 660:	02 c0       	rjmp	.+4      	; 0x666 <DIO_u8read+0x76>
 662:	22 0f       	add	r18, r18
 664:	33 1f       	adc	r19, r19
 666:	0a 94       	dec	r0
 668:	e2 f7       	brpl	.-8      	; 0x662 <DIO_u8read+0x72>
 66a:	84 2f       	mov	r24, r20
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	82 23       	and	r24, r18
 670:	93 23       	and	r25, r19
 672:	02 c0       	rjmp	.+4      	; 0x678 <DIO_u8read+0x88>
 674:	95 95       	asr	r25
 676:	87 95       	ror	r24
 678:	6a 95       	dec	r22
 67a:	e2 f7       	brpl	.-8      	; 0x674 <DIO_u8read+0x84>
		break;
 67c:	08 95       	ret
		
		case 'D' :
		return_value=Read_bIT(PIND,pinnumber);//Read the value from the given pin in port D
 67e:	40 b3       	in	r20, 0x10	; 16
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	9c 01       	movw	r18, r24
 686:	06 2e       	mov	r0, r22
 688:	02 c0       	rjmp	.+4      	; 0x68e <DIO_u8read+0x9e>
 68a:	22 0f       	add	r18, r18
 68c:	33 1f       	adc	r19, r19
 68e:	0a 94       	dec	r0
 690:	e2 f7       	brpl	.-8      	; 0x68a <DIO_u8read+0x9a>
 692:	84 2f       	mov	r24, r20
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	82 23       	and	r24, r18
 698:	93 23       	and	r25, r19
 69a:	02 c0       	rjmp	.+4      	; 0x6a0 <DIO_u8read+0xb0>
 69c:	95 95       	asr	r25
 69e:	87 95       	ror	r24
 6a0:	6a 95       	dec	r22
 6a2:	e2 f7       	brpl	.-8      	; 0x69c <DIO_u8read+0xac>
		break;
 6a4:	08 95       	ret
}


uint8 DIO_u8read(uint8 portname,uint8 pinnumber)
{
	uint8 return_value=0;
 6a6:	80 e0       	ldi	r24, 0x00	; 0
		return_value=Read_bIT(PIND,pinnumber);//Read the value from the given pin in port D
		break;
		default: break;
	}
	return return_value ;
}
 6a8:	08 95       	ret

000006aa <SPI_vInitSlave>:
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);//Enable the SPI,master mode ,Set the clock speed to F/16
}

void SPI_vInitSlave (void)
{
	DDRB |= (1<<SPI_MISO) ;//Set the port B miso(master in slave out ) pin as output
 6aa:	87 b3       	in	r24, 0x17	; 23
 6ac:	80 64       	ori	r24, 0x40	; 64
 6ae:	87 bb       	out	0x17, r24	; 23
	SPCR |= (1<<SPE);//Enable the SPI
 6b0:	8d b1       	in	r24, 0x0d	; 13
 6b2:	80 64       	ori	r24, 0x40	; 64
 6b4:	8d b9       	out	0x0d, r24	; 13
 6b6:	08 95       	ret

000006b8 <SPI_ui8TransmitRecive>:
}

uint8 SPI_ui8TransmitRecive (uint8 data)
{
	SPDR = data;//move the given data to SPI Data register
 6b8:	8f b9       	out	0x0f, r24	; 15
	
	//in case of master send data and wait till the data are fully transmitted
	//in case of slave wait the data to be transmitted by the master
	while (((SPSR&(1<<SPIF))>>SPIF)==0)	//wait till the transmitting is done
 6ba:	77 9b       	sbis	0x0e, 7	; 14
 6bc:	fe cf       	rjmp	.-4      	; 0x6ba <SPI_ui8TransmitRecive+0x2>
	;									//SPI flag is set to one if the transmission is done
	
	return SPDR;//return the value of SPI Data register after the transmission or receiving is done
 6be:	8f b1       	in	r24, 0x0f	; 15
 6c0:	08 95       	ret

000006c2 <timer0_initializeCTC>:

void timer0_initializeCTC(void)
{
	//Config OCR0
	//OCR0 = the value to compare with
	OCR0 = 78; //to achieve tick equal to 10 msec
 6c2:	8e e4       	ldi	r24, 0x4E	; 78
 6c4:	8c bf       	out	0x3c, r24	; 60
	
	//Set timer mode
	//Set the mode as Compare match
	SET_BIT(TCCR0, WGM01);
 6c6:	83 b7       	in	r24, 0x33	; 51
 6c8:	88 60       	ori	r24, 0x08	; 8
 6ca:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, WGM00);
 6cc:	83 b7       	in	r24, 0x33	; 51
 6ce:	8f 7b       	andi	r24, 0xBF	; 191
 6d0:	83 bf       	out	0x33, r24	; 51
	
	//Configure clock
	//set as clk/1024
	SET_BIT(TCCR0, CS00);
 6d2:	83 b7       	in	r24, 0x33	; 51
 6d4:	81 60       	ori	r24, 0x01	; 1
 6d6:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS01);
 6d8:	83 b7       	in	r24, 0x33	; 51
 6da:	8d 7f       	andi	r24, 0xFD	; 253
 6dc:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0, CS02);
 6de:	83 b7       	in	r24, 0x33	; 51
 6e0:	84 60       	ori	r24, 0x04	; 4
 6e2:	83 bf       	out	0x33, r24	; 51
	
	//Enable global interrupts
	sei();
 6e4:	78 94       	sei
	
	//Enable timer 0 interrupt for compare match
	SET_BIT(TIMSK, OCIE0);
 6e6:	89 b7       	in	r24, 0x39	; 57
 6e8:	82 60       	ori	r24, 0x02	; 2
 6ea:	89 bf       	out	0x39, r24	; 57
 6ec:	08 95       	ret

000006ee <timer0_stop>:
}

void timer0_stop(void)
{
	//disable the clock to stop the counter
	CLR_BIT(TCCR0, CS00);
 6ee:	83 b7       	in	r24, 0x33	; 51
 6f0:	8e 7f       	andi	r24, 0xFE	; 254
 6f2:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS01);
 6f4:	83 b7       	in	r24, 0x33	; 51
 6f6:	8d 7f       	andi	r24, 0xFD	; 253
 6f8:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS02);
 6fa:	83 b7       	in	r24, 0x33	; 51
 6fc:	8b 7f       	andi	r24, 0xFB	; 251
 6fe:	83 bf       	out	0x33, r24	; 51
 700:	08 95       	ret

00000702 <__fixunssfsi>:
 702:	0e 94 1d 04 	call	0x83a	; 0x83a <__fp_splitA>
 706:	88 f0       	brcs	.+34     	; 0x72a <__fixunssfsi+0x28>
 708:	9f 57       	subi	r25, 0x7F	; 127
 70a:	98 f0       	brcs	.+38     	; 0x732 <__fixunssfsi+0x30>
 70c:	b9 2f       	mov	r27, r25
 70e:	99 27       	eor	r25, r25
 710:	b7 51       	subi	r27, 0x17	; 23
 712:	b0 f0       	brcs	.+44     	; 0x740 <__fixunssfsi+0x3e>
 714:	e1 f0       	breq	.+56     	; 0x74e <__fixunssfsi+0x4c>
 716:	66 0f       	add	r22, r22
 718:	77 1f       	adc	r23, r23
 71a:	88 1f       	adc	r24, r24
 71c:	99 1f       	adc	r25, r25
 71e:	1a f0       	brmi	.+6      	; 0x726 <__fixunssfsi+0x24>
 720:	ba 95       	dec	r27
 722:	c9 f7       	brne	.-14     	; 0x716 <__fixunssfsi+0x14>
 724:	14 c0       	rjmp	.+40     	; 0x74e <__fixunssfsi+0x4c>
 726:	b1 30       	cpi	r27, 0x01	; 1
 728:	91 f0       	breq	.+36     	; 0x74e <__fixunssfsi+0x4c>
 72a:	0e 94 37 04 	call	0x86e	; 0x86e <__fp_zero>
 72e:	b1 e0       	ldi	r27, 0x01	; 1
 730:	08 95       	ret
 732:	0c 94 37 04 	jmp	0x86e	; 0x86e <__fp_zero>
 736:	67 2f       	mov	r22, r23
 738:	78 2f       	mov	r23, r24
 73a:	88 27       	eor	r24, r24
 73c:	b8 5f       	subi	r27, 0xF8	; 248
 73e:	39 f0       	breq	.+14     	; 0x74e <__fixunssfsi+0x4c>
 740:	b9 3f       	cpi	r27, 0xF9	; 249
 742:	cc f3       	brlt	.-14     	; 0x736 <__fixunssfsi+0x34>
 744:	86 95       	lsr	r24
 746:	77 95       	ror	r23
 748:	67 95       	ror	r22
 74a:	b3 95       	inc	r27
 74c:	d9 f7       	brne	.-10     	; 0x744 <__fixunssfsi+0x42>
 74e:	3e f4       	brtc	.+14     	; 0x75e <__fixunssfsi+0x5c>
 750:	90 95       	com	r25
 752:	80 95       	com	r24
 754:	70 95       	com	r23
 756:	61 95       	neg	r22
 758:	7f 4f       	sbci	r23, 0xFF	; 255
 75a:	8f 4f       	sbci	r24, 0xFF	; 255
 75c:	9f 4f       	sbci	r25, 0xFF	; 255
 75e:	08 95       	ret

00000760 <__floatunsisf>:
 760:	e8 94       	clt
 762:	09 c0       	rjmp	.+18     	; 0x776 <__floatsisf+0x12>

00000764 <__floatsisf>:
 764:	97 fb       	bst	r25, 7
 766:	3e f4       	brtc	.+14     	; 0x776 <__floatsisf+0x12>
 768:	90 95       	com	r25
 76a:	80 95       	com	r24
 76c:	70 95       	com	r23
 76e:	61 95       	neg	r22
 770:	7f 4f       	sbci	r23, 0xFF	; 255
 772:	8f 4f       	sbci	r24, 0xFF	; 255
 774:	9f 4f       	sbci	r25, 0xFF	; 255
 776:	99 23       	and	r25, r25
 778:	a9 f0       	breq	.+42     	; 0x7a4 <__floatsisf+0x40>
 77a:	f9 2f       	mov	r31, r25
 77c:	96 e9       	ldi	r25, 0x96	; 150
 77e:	bb 27       	eor	r27, r27
 780:	93 95       	inc	r25
 782:	f6 95       	lsr	r31
 784:	87 95       	ror	r24
 786:	77 95       	ror	r23
 788:	67 95       	ror	r22
 78a:	b7 95       	ror	r27
 78c:	f1 11       	cpse	r31, r1
 78e:	f8 cf       	rjmp	.-16     	; 0x780 <__floatsisf+0x1c>
 790:	fa f4       	brpl	.+62     	; 0x7d0 <__floatsisf+0x6c>
 792:	bb 0f       	add	r27, r27
 794:	11 f4       	brne	.+4      	; 0x79a <__floatsisf+0x36>
 796:	60 ff       	sbrs	r22, 0
 798:	1b c0       	rjmp	.+54     	; 0x7d0 <__floatsisf+0x6c>
 79a:	6f 5f       	subi	r22, 0xFF	; 255
 79c:	7f 4f       	sbci	r23, 0xFF	; 255
 79e:	8f 4f       	sbci	r24, 0xFF	; 255
 7a0:	9f 4f       	sbci	r25, 0xFF	; 255
 7a2:	16 c0       	rjmp	.+44     	; 0x7d0 <__floatsisf+0x6c>
 7a4:	88 23       	and	r24, r24
 7a6:	11 f0       	breq	.+4      	; 0x7ac <__floatsisf+0x48>
 7a8:	96 e9       	ldi	r25, 0x96	; 150
 7aa:	11 c0       	rjmp	.+34     	; 0x7ce <__floatsisf+0x6a>
 7ac:	77 23       	and	r23, r23
 7ae:	21 f0       	breq	.+8      	; 0x7b8 <__floatsisf+0x54>
 7b0:	9e e8       	ldi	r25, 0x8E	; 142
 7b2:	87 2f       	mov	r24, r23
 7b4:	76 2f       	mov	r23, r22
 7b6:	05 c0       	rjmp	.+10     	; 0x7c2 <__floatsisf+0x5e>
 7b8:	66 23       	and	r22, r22
 7ba:	71 f0       	breq	.+28     	; 0x7d8 <__floatsisf+0x74>
 7bc:	96 e8       	ldi	r25, 0x86	; 134
 7be:	86 2f       	mov	r24, r22
 7c0:	70 e0       	ldi	r23, 0x00	; 0
 7c2:	60 e0       	ldi	r22, 0x00	; 0
 7c4:	2a f0       	brmi	.+10     	; 0x7d0 <__floatsisf+0x6c>
 7c6:	9a 95       	dec	r25
 7c8:	66 0f       	add	r22, r22
 7ca:	77 1f       	adc	r23, r23
 7cc:	88 1f       	adc	r24, r24
 7ce:	da f7       	brpl	.-10     	; 0x7c6 <__floatsisf+0x62>
 7d0:	88 0f       	add	r24, r24
 7d2:	96 95       	lsr	r25
 7d4:	87 95       	ror	r24
 7d6:	97 f9       	bld	r25, 7
 7d8:	08 95       	ret

000007da <__fp_inf>:
 7da:	97 f9       	bld	r25, 7
 7dc:	9f 67       	ori	r25, 0x7F	; 127
 7de:	80 e8       	ldi	r24, 0x80	; 128
 7e0:	70 e0       	ldi	r23, 0x00	; 0
 7e2:	60 e0       	ldi	r22, 0x00	; 0
 7e4:	08 95       	ret

000007e6 <__fp_nan>:
 7e6:	9f ef       	ldi	r25, 0xFF	; 255
 7e8:	80 ec       	ldi	r24, 0xC0	; 192
 7ea:	08 95       	ret

000007ec <__fp_pscA>:
 7ec:	00 24       	eor	r0, r0
 7ee:	0a 94       	dec	r0
 7f0:	16 16       	cp	r1, r22
 7f2:	17 06       	cpc	r1, r23
 7f4:	18 06       	cpc	r1, r24
 7f6:	09 06       	cpc	r0, r25
 7f8:	08 95       	ret

000007fa <__fp_pscB>:
 7fa:	00 24       	eor	r0, r0
 7fc:	0a 94       	dec	r0
 7fe:	12 16       	cp	r1, r18
 800:	13 06       	cpc	r1, r19
 802:	14 06       	cpc	r1, r20
 804:	05 06       	cpc	r0, r21
 806:	08 95       	ret

00000808 <__fp_round>:
 808:	09 2e       	mov	r0, r25
 80a:	03 94       	inc	r0
 80c:	00 0c       	add	r0, r0
 80e:	11 f4       	brne	.+4      	; 0x814 <__fp_round+0xc>
 810:	88 23       	and	r24, r24
 812:	52 f0       	brmi	.+20     	; 0x828 <__fp_round+0x20>
 814:	bb 0f       	add	r27, r27
 816:	40 f4       	brcc	.+16     	; 0x828 <__fp_round+0x20>
 818:	bf 2b       	or	r27, r31
 81a:	11 f4       	brne	.+4      	; 0x820 <__fp_round+0x18>
 81c:	60 ff       	sbrs	r22, 0
 81e:	04 c0       	rjmp	.+8      	; 0x828 <__fp_round+0x20>
 820:	6f 5f       	subi	r22, 0xFF	; 255
 822:	7f 4f       	sbci	r23, 0xFF	; 255
 824:	8f 4f       	sbci	r24, 0xFF	; 255
 826:	9f 4f       	sbci	r25, 0xFF	; 255
 828:	08 95       	ret

0000082a <__fp_split3>:
 82a:	57 fd       	sbrc	r21, 7
 82c:	90 58       	subi	r25, 0x80	; 128
 82e:	44 0f       	add	r20, r20
 830:	55 1f       	adc	r21, r21
 832:	59 f0       	breq	.+22     	; 0x84a <__fp_splitA+0x10>
 834:	5f 3f       	cpi	r21, 0xFF	; 255
 836:	71 f0       	breq	.+28     	; 0x854 <__fp_splitA+0x1a>
 838:	47 95       	ror	r20

0000083a <__fp_splitA>:
 83a:	88 0f       	add	r24, r24
 83c:	97 fb       	bst	r25, 7
 83e:	99 1f       	adc	r25, r25
 840:	61 f0       	breq	.+24     	; 0x85a <__fp_splitA+0x20>
 842:	9f 3f       	cpi	r25, 0xFF	; 255
 844:	79 f0       	breq	.+30     	; 0x864 <__stack+0x5>
 846:	87 95       	ror	r24
 848:	08 95       	ret
 84a:	12 16       	cp	r1, r18
 84c:	13 06       	cpc	r1, r19
 84e:	14 06       	cpc	r1, r20
 850:	55 1f       	adc	r21, r21
 852:	f2 cf       	rjmp	.-28     	; 0x838 <__fp_split3+0xe>
 854:	46 95       	lsr	r20
 856:	f1 df       	rcall	.-30     	; 0x83a <__fp_splitA>
 858:	08 c0       	rjmp	.+16     	; 0x86a <__stack+0xb>
 85a:	16 16       	cp	r1, r22
 85c:	17 06       	cpc	r1, r23
 85e:	18 06       	cpc	r1, r24
 860:	99 1f       	adc	r25, r25
 862:	f1 cf       	rjmp	.-30     	; 0x846 <__fp_splitA+0xc>
 864:	86 95       	lsr	r24
 866:	71 05       	cpc	r23, r1
 868:	61 05       	cpc	r22, r1
 86a:	08 94       	sec
 86c:	08 95       	ret

0000086e <__fp_zero>:
 86e:	e8 94       	clt

00000870 <__fp_szero>:
 870:	bb 27       	eor	r27, r27
 872:	66 27       	eor	r22, r22
 874:	77 27       	eor	r23, r23
 876:	cb 01       	movw	r24, r22
 878:	97 f9       	bld	r25, 7
 87a:	08 95       	ret

0000087c <__mulsf3>:
 87c:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__mulsf3x>
 880:	0c 94 04 04 	jmp	0x808	; 0x808 <__fp_round>
 884:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__fp_pscA>
 888:	38 f0       	brcs	.+14     	; 0x898 <__mulsf3+0x1c>
 88a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__fp_pscB>
 88e:	20 f0       	brcs	.+8      	; 0x898 <__mulsf3+0x1c>
 890:	95 23       	and	r25, r21
 892:	11 f0       	breq	.+4      	; 0x898 <__mulsf3+0x1c>
 894:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__fp_inf>
 898:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <__fp_nan>
 89c:	11 24       	eor	r1, r1
 89e:	0c 94 38 04 	jmp	0x870	; 0x870 <__fp_szero>

000008a2 <__mulsf3x>:
 8a2:	0e 94 15 04 	call	0x82a	; 0x82a <__fp_split3>
 8a6:	70 f3       	brcs	.-36     	; 0x884 <__mulsf3+0x8>

000008a8 <__mulsf3_pse>:
 8a8:	95 9f       	mul	r25, r21
 8aa:	c1 f3       	breq	.-16     	; 0x89c <__mulsf3+0x20>
 8ac:	95 0f       	add	r25, r21
 8ae:	50 e0       	ldi	r21, 0x00	; 0
 8b0:	55 1f       	adc	r21, r21
 8b2:	62 9f       	mul	r22, r18
 8b4:	f0 01       	movw	r30, r0
 8b6:	72 9f       	mul	r23, r18
 8b8:	bb 27       	eor	r27, r27
 8ba:	f0 0d       	add	r31, r0
 8bc:	b1 1d       	adc	r27, r1
 8be:	63 9f       	mul	r22, r19
 8c0:	aa 27       	eor	r26, r26
 8c2:	f0 0d       	add	r31, r0
 8c4:	b1 1d       	adc	r27, r1
 8c6:	aa 1f       	adc	r26, r26
 8c8:	64 9f       	mul	r22, r20
 8ca:	66 27       	eor	r22, r22
 8cc:	b0 0d       	add	r27, r0
 8ce:	a1 1d       	adc	r26, r1
 8d0:	66 1f       	adc	r22, r22
 8d2:	82 9f       	mul	r24, r18
 8d4:	22 27       	eor	r18, r18
 8d6:	b0 0d       	add	r27, r0
 8d8:	a1 1d       	adc	r26, r1
 8da:	62 1f       	adc	r22, r18
 8dc:	73 9f       	mul	r23, r19
 8de:	b0 0d       	add	r27, r0
 8e0:	a1 1d       	adc	r26, r1
 8e2:	62 1f       	adc	r22, r18
 8e4:	83 9f       	mul	r24, r19
 8e6:	a0 0d       	add	r26, r0
 8e8:	61 1d       	adc	r22, r1
 8ea:	22 1f       	adc	r18, r18
 8ec:	74 9f       	mul	r23, r20
 8ee:	33 27       	eor	r19, r19
 8f0:	a0 0d       	add	r26, r0
 8f2:	61 1d       	adc	r22, r1
 8f4:	23 1f       	adc	r18, r19
 8f6:	84 9f       	mul	r24, r20
 8f8:	60 0d       	add	r22, r0
 8fa:	21 1d       	adc	r18, r1
 8fc:	82 2f       	mov	r24, r18
 8fe:	76 2f       	mov	r23, r22
 900:	6a 2f       	mov	r22, r26
 902:	11 24       	eor	r1, r1
 904:	9f 57       	subi	r25, 0x7F	; 127
 906:	50 40       	sbci	r21, 0x00	; 0
 908:	9a f0       	brmi	.+38     	; 0x930 <__mulsf3_pse+0x88>
 90a:	f1 f0       	breq	.+60     	; 0x948 <__mulsf3_pse+0xa0>
 90c:	88 23       	and	r24, r24
 90e:	4a f0       	brmi	.+18     	; 0x922 <__mulsf3_pse+0x7a>
 910:	ee 0f       	add	r30, r30
 912:	ff 1f       	adc	r31, r31
 914:	bb 1f       	adc	r27, r27
 916:	66 1f       	adc	r22, r22
 918:	77 1f       	adc	r23, r23
 91a:	88 1f       	adc	r24, r24
 91c:	91 50       	subi	r25, 0x01	; 1
 91e:	50 40       	sbci	r21, 0x00	; 0
 920:	a9 f7       	brne	.-22     	; 0x90c <__mulsf3_pse+0x64>
 922:	9e 3f       	cpi	r25, 0xFE	; 254
 924:	51 05       	cpc	r21, r1
 926:	80 f0       	brcs	.+32     	; 0x948 <__mulsf3_pse+0xa0>
 928:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__fp_inf>
 92c:	0c 94 38 04 	jmp	0x870	; 0x870 <__fp_szero>
 930:	5f 3f       	cpi	r21, 0xFF	; 255
 932:	e4 f3       	brlt	.-8      	; 0x92c <__mulsf3_pse+0x84>
 934:	98 3e       	cpi	r25, 0xE8	; 232
 936:	d4 f3       	brlt	.-12     	; 0x92c <__mulsf3_pse+0x84>
 938:	86 95       	lsr	r24
 93a:	77 95       	ror	r23
 93c:	67 95       	ror	r22
 93e:	b7 95       	ror	r27
 940:	f7 95       	ror	r31
 942:	e7 95       	ror	r30
 944:	9f 5f       	subi	r25, 0xFF	; 255
 946:	c1 f7       	brne	.-16     	; 0x938 <__mulsf3_pse+0x90>
 948:	fe 2b       	or	r31, r30
 94a:	88 0f       	add	r24, r24
 94c:	91 1d       	adc	r25, r1
 94e:	96 95       	lsr	r25
 950:	87 95       	ror	r24
 952:	97 f9       	bld	r25, 7
 954:	08 95       	ret

00000956 <__tablejump2__>:
 956:	ee 0f       	add	r30, r30
 958:	ff 1f       	adc	r31, r31
 95a:	05 90       	lpm	r0, Z+
 95c:	f4 91       	lpm	r31, Z
 95e:	e0 2d       	mov	r30, r0
 960:	09 94       	ijmp

00000962 <_exit>:
 962:	f8 94       	cli

00000964 <__stop_program>:
 964:	ff cf       	rjmp	.-2      	; 0x964 <__stop_program>
